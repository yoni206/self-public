constant symbol Prop : TYPE;
symbol Prf : Prop → TYPE;
symbol true : Prop;
symbol false : Prop;
symbol ∧ : Prop → Prop → Prop;
notation ∧ infix right 10;
rule ($x ∧ $y) ∧ $z ↪ $x ∧ ($y ∧ $z);
symbol A : Prop;
symbol B : Prop;
symbol C : Prop;
symbol ∧ₑ₁ [p q] : Prf (p ∧ q) → Prf p;
rule Prf ($x ∧ $y) ↪ Prf $x;
constant symbol nat : TYPE;
symbol 0 : nat;
symbol S : nat → nat;
symbol 1 ≔ S 0;
symbol 2 ≔ S (S 0);
symbol × : nat → Prop → Prop;
notation × infix 10;
symbol ∧ₑ₁0 [p q] : Prf (0 × (p ∧ q)) → Prf (q);
symbol ∧ₑ₁S [i p q] : Prf ((S i) × (p ∧ q)) → Prf (i × q);
assert ⊢ (S (S 0)) × (A ∧ B) : Prop;
rule 0 × $x ↪ $x;
rule (S $i) × ($x ∧ $y) ↪ $i × $y;
compute 0 × (A ∧ B);
compute 1 × (A ∧ (B ∧ C));
compute 2 × (A ∧ (B ∧ C));
